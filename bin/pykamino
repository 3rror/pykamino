#!/usr/bin/env python
import argparse
from datetime import datetime

from pykamino._cli import features, scraper

parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers()


scra_parser = subparsers.add_parser(
    'scraper',
    help='Fetch data in background')
scra_subparsers = scra_parser.add_subparsers()


scra_run_parser = scra_subparsers.add_parser(
    'run',
    help='Run the daemon')
scra_run_parser.add_argument(
    '-b',
    '--buffer',
    help='number of messages to buffer before saving them',
    type=int,
    default=1000)
scra_run_parser.set_defaults(action=scraper.run)


scra_stop_parser = scra_subparsers.add_parser('stop', help='Stop the daemon')
scra_stop_parser.set_defaults(action=scraper.stop)


def dt_validator(dt):
    try:
        return datetime.strptime(dt, '%Y-%m-%d %H:%M:%S.%f')
    except ValueError:
        try:
            return datetime.strptime(dt, '%Y-%m-%d %H:%M:%S')
        except ValueError:
            raise argparse.ArgumentTypeError(
                '{} is not a valid datetime'.format(dt))


feat_parser = subparsers.add_parser(
    'features',
    help='Calculate features from the downloaded data')
feat_parser.set_defaults(action=features.compute)
feat_parser.add_argument(
    'category',
    choices=['orders', 'trades', 'all'],
    default=['all'],
    help='category of data of which you want to calculate features',
    nargs='?')
feat_parser.add_argument(
    'start',
    type=dt_validator,
    help='date and time string in ISO8601 format')
feat_parser.add_argument(
    'end',
    type=dt_validator,
    help='date and time string in ISO8601 format')
feat_parser.add_argument(
    'resolution',
    help='time resolution used in data sampling'
)
feat_parser.add_argument(
    '-p',
    '--path',
    help='where to store output files',
    default='.'
)
feat_parser.add_argument(
    '-s',
    '--stride',
    type=float,
    help='offset (in %%) of the next sample. Only meaningful for trades',
    default=100
)


args = parser.parse_args()
args.action(**vars(args))
